import time
import matplotlib.pyplot as plt

# Top-down (recursive) approach
def fibonacci_recursive(n):
    if n <= 1:
        return n
    else:
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# Bottom-up (dynamic programming) approach
def fibonacci_dp(n):
    fib = [0] * (n+1)
    fib[1] = 1
    for i in range(2, n+1):
        fib[i] = fib[i-1] + fib[i-2]
    return fib[n]

# Measure execution time for each method
def measure_execution_time():
    n_values = list(range(1, 101))
    recursive_times = []
    dp_times = []

    for n in n_values:
        start_time = time.time()
        fibonacci_recursive(n)
        end_time = time.time()
        recursive_times.append(end_time - start_time)

        start_time = time.time()
        fibonacci_dp(n)
        end_time = time.time()
        dp_times.append(end_time - start_time)

    return recursive_times, dp_times

# Plot execution times
def plot_execution_times(recursive_times, dp_times):
    n_values = list(range(1, 101))
    plt.plot(n_values, recursive_times, label='Recursive')
    plt.plot(n_values, dp_times, label='Dynamic Programming')
    plt.xlabel('n')
    plt.ylabel('Execution Time (seconds)')
    plt.title('Execution Time of Fibonacci Calculation')
    plt.legend()
    plt.show()

# Calculate the number of times F(4) is computed when computing F(5) to F(50)
def calculate_overlap():
    overlap_counts = []
    for n in range(5, 51):
        count = 0
        fibonacci_dp(n)
        count = fibonacci_recursive.cache_info().hits
        overlap_counts.append(count)
    return overlap_counts

# Plot overlap counts
def plot_overlap_counts(overlap_counts):
    n_values = list(range(5, 51))
    plt.plot(n_values, overlap_counts)
    plt.xlabel('n')
    plt.ylabel('Overlap Count')
    plt.title('Overlap of Subproblems (F(4) computation)')
    plt.show()

# Main function
if __name__ == "__main__":
    recursive_times, dp_times = measure_execution_time()
    plot_execution_times(recursive_times, dp_times)

    overlap_counts = calculate_overlap()
    plot_overlap_counts(overlap_counts)
